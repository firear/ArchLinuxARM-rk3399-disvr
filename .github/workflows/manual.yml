name: Build rk3399_disvr archlinuxarm

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - master
    paths-ignore:
      - "**/README.md"

jobs:
  build:
    runs-on: ubuntu-latest
    env: 
      BUILD_SH: 'sudo arch-chroot ./builder qemu-aarch64-static /usr/bin/bash -c'
      IMG_NAME: 'ArchLinuxARM-rk3399_disvr-latest'

    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: Set variables
        run: |
          echo V_SD=$(losetup -f) >> $GITHUB_ENV
          echo RELEASE=$(date +%Y\/%m\/%d) >> $GITHUB_ENV
        shell: bash

      - name: generate builder
        run: |
          sudo apt update && sudo apt install qemu-user-static libarchive-tools arch-install-scripts xz
          sudo curl -L -o ./ArchLinuxARM-aarch64-latest.tar.gz http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz
          sudo curl -L -o ./${{ env.IMG_NAME }}.img.xz https://dl.armbian.com/firefly-rk3399/Bookworm_current_minimal
	        sudo xz -d ./${{ env.IMG_NAME }}.img.xz
          sudo mkdir ./builder
          sudo bsdtar -xpf ./ArchLinuxARM-aarch64-latest.tar.gz -C ./builder
          sudo mount --bind ./builder ./builder
          sudo cp /usr/bin/qemu-aarch64-static ./builder/usr/bin/qemu-aarch64-static
          sudo cp -f ./pacman.conf ./builder/etc/pacman.conf
          ${{ env.BUILD_SH }} "pacman -R --ask=4 linux-aarch64"
          ${{ env.BUILD_SH }} "pacman -Syyu --ask=4 arch-install-scripts cloud-guest-utils"
        shell: bash

      - name: prepare img file
        run: |
          sudo losetup --partscan ${{ env.V_SD }} ${{ env.IMG_NAME }}.img
          sudo mount ${{ env.V_SD }}p1 ./builder/mnt
          sudo mv ./builder/mnt/boot ./builder/
          sudo rm -rf ./builder/mnt/*
          sudo mv ./builder/boot ./builder/mnt/
          sudo cp rk-kernel.dtb ./builder/mnt/boot/dtb/rockchip/rk3399-firefly.dtb
        shell: bash

      - name: generate target
        run: |
          echo 0
          ${{ env.BUILD_SH }} "pacstrap -cGM /mnt $(cat packages.md)"
          echo 1
          ${{ env.BUILD_SH }} "rm -f /mnt/etc/resolv.conf"
          echo 2
          ${{ env.BUILD_SH }} "ln -sf /run/systemd/resolve/resolv.conf /mnt/etc/resolv.conf"
          echo 3
          ${{ env.BUILD_SH }} "echo -e '[Match]\nName=en*\n\n[Network]\nDHCP=yes\nDNSSEC=no'>/mnt/etc/systemd/network/en.network"
          echo 4
          ${{ env.BUILD_SH }} "echo -e '[Match]\nName=eth*\n\n[Network]\nDHCP=yes\nDNSSEC=no'>/mnt/etc/systemd/network/eth.network"
          echo 5
          echo 6
          ${{ env.BUILD_SH }} "echo 'alarm'>/mnt/etc/hostname"
          echo 7
          ${{ env.BUILD_SH }} "echo 'LANG=C'>/mnt/etc/locale.conf"
          echo 8
          ${{ env.BUILD_SH }} "useradd -d /home/alarm -m -U alarm --root /mnt"
          echo 9
          ${{ env.BUILD_SH }} "echo -e 'root:root\nalarm:alarm' | chpasswd --root /mnt"
          echo 10
          ${{ env.BUILD_SH }} "usermod -a -G wheel alarm --root /mnt"
          echo 11
          ${{ env.BUILD_SH }} "echo -n > /mnt/etc/machine-id"
          echo 12
          ${{ env.BUILD_SH }} "systemctl --root=/mnt enable $(cat services.md)"
          echo 13
        shell: bash


      - name: create and enable resize2fs_once service
        run: |
          ${{ env.BUILD_SH }} "cp -f /usr/bin/growpart /mnt/usr/local/bin/growpart"
          sudo cp resize2fs_once.service ./builder/mnt/etc/systemd/system/resize2fs_once.service
          ${{ env.BUILD_SH }} "chmod a+x /mnt/usr/local/bin/growpart"
          ${{ env.BUILD_SH }} "systemctl --root=/mnt enable resize2fs_once.service"
        shell: bash

      - name: clean and package img file
        run: |
          ${{ env.BUILD_SH }} "rm -rf /mnt/etc/*- /mnt/root/.bash_history /mnt/root/.gnupg /mnt/var/log/* /mnt/var/lib/systemd/* "
          sudo umount -R ./builder/mnt
          sudo tune2fs -M / ${{ env.V_SD }}p1
          sudo e2fsck -yf -E discard ${{ env.V_SD }}p1
          sudo resize2fs -M ${{ env.V_SD }}p1
          sudo e2fsck -yf ${{ env.V_SD }}p1
          IMG_END=$(sudo fdisk -l -o end ${{ env.V_SD }} | sed -n '$p')
          sudo losetup -d ${{ env.V_SD }}
          sudo truncate --size=$[($IMG_END+1)*512] ${{ env.IMG_NAME }}.img
          zip ${{ env.IMG_NAME }}.img.zip ${{ env.IMG_NAME }}.img
        shell: bash

      - name: prepare release files
        run: |
          sha256sum ${{ env.IMG_NAME }}.img.zip > ./${{ env.IMG_NAME }}.img.zip.sha256sum
        shell: bash

      - name: create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ env.RELEASE }}
          tag_name: ${{ env.RELEASE }}
          draft: false
          prerelease: false
          files: |
            ./${{ env.IMG_NAME }}.img.zip
            ./${{ env.IMG_NAME }}.img.zip.sha256sum

      - name: delete old releases
        uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 1
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
